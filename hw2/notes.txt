Exercise 4:
-----------

A(i).
Events:
	f16 -> f3
	f5 -> f18
	f17 -> f6
	f15 -> f6

 (ii).
	f1    = 0
	f2    = 1
	f3    = 3
	f4    = 4
	f5    = 5
	f6    = 7
	f7    = 8
	f8    = 0
	f9    = 1
	f10   = 2
	f11   = 3
	f12   = 4
	f13   = 9
	f14   = 10
	f15   = 0
	f16   = 1
	f17   = 2
	f18   = 6
	f19   = 7
	f20   = 8

 (iii).
	f1    = 
	f2    = 
	f3    = 
	f4    = 
	f5    = 
	f6    = 
	f7    = 
	f8    = 
	f9    = 
	f10   = 
	f11   = 
	f12   = 
	f13   = 
	f14   = 
	f15   = 
	f16   = 
	f17   = 
	f18   = 
	f19   = 
	f20   = 

Use a counterexample to show that the correctness of the algorithm
does not hold when the channels are not FIFO.

Let's have an example with two processes P1 and P2. P1 send a message
M1 to P2. The message M1 was delivered after a later-sent application
message. Because of this reordering, the recorded global state is
inconsistent

Propose a modification of the Chandy-Lamport Algorithm that works
correctly when the channels are not FIFO. Provide pseudocode for your
solution and explain your reasoning.

By recording the messages in the process states, we can ignore
flushing channels. In this model, the original CL algorithm is:

p0: send "SS" to self

pi: when receive "SS" for first time (from pj) {
      record state
      send "SS" to all neighbors
      for each neighbor except pj wait for "SS"
      }

This assumes FIFO channels. To accommodate non-FIFO channels, we just
have to ensure that the delivery of the snapshot message does not get
moved after the delivery of subsequent messages. The easiest way to do
this is to block sending application messages until the snapshot is
complete. We define a set BLOCK for each process p. For each process q
in BLOCK, p will block all sends to q until q is no longer in BLOCK.

p0: send "SS" to self

pi: when receive "SS" for first time (from pj) {
      record state
      BLOCK = all neighbors - { pj }
      send "SS" to all neighbors
      while (BLOCK != 0) {
        when receive "SS" (from pk)
          BLOCK = BLOCK - { pk }
        }
      }

Exercise 1:
------------

var depth = 0;
var replies = 0;
var num_leafs = 0;

// Constructed spanning tree
upon receive no message:
	if pi == pr && parent == null then
		send <M> to all neighbors
		parent = pi

upon receiving <M> from neighbor pj:
	if parent == NULL then
		parent = pj
		send <parent> to pj
		if count(neighbors) > 1
			depth = 1;
			send <M> to all neighbors except pj
	else
		send <already> to pj

upon receiving <parent> from neighbor pj:
	add pj to children
	if children U other contains all neighbors except parent then
		terminate

upon receiving <already> from neighbor pj:
	add pj to other
	if children U other contains all neighbors except parent then
		terminate

// Calculate leafs
upon receive no message:
	if pi == pr && parent == null then
		send <M> to all childrens

upon receiving <M> from parent pj
	if has_no_children 
		send <Leaf, 1, depth> to parent pj
	else 
		send <M> to all childrens

upon receiving <Leaf, count, d> from children pj
	replies ++;
	num_leafs += count

	depth -= d

	if replies == childrens
		if parent == null
			if (depth == 1)
				return TRUE
			else 
				return FALSE
		else 
			if (depth == 1)
				send <Leaf, num_of_leaf, 0> to parent
			else 
				send <Leaf, num_of_leaf, depth> to parent

Communication complexity:
Creation of Spanning Tree: O(m*n)
Count Leafs: (2n-1)

Time complexity:
Creation of Spanning Tree: O(diam)
Count Leafs: (O(hight) height is the length of the longest path

Exercise 2:
------------
Present event-driven pseudo-code for counting the number of nodes in
an Asynchronous System given an Unrooted Spanning Tree of the system
(see slide 6 in Section Advanced Graph Algorithms). What is the
communication complexity and the time complexity of your algorithm?
Justify your answer.

A convergecast of <elect> messages is initiated starting from the
leaves of the tree.

var replies = 0;
var leader = 0;

every leaf node:
	send <ELECT, UID, 1> to neighbor pj

upon receiving <ELECT, UID, COUNT> message from neighbor pj:
	nodes += COUNT;
	if (replies == num_leafs)
		start from pj to send<ELECT, UID, COUNT> to remaining neighbors
		terminate

	if (replies == num_of_neighbors)
		if (_uid > UID)
			return nodes + 1;
			terminate

Message Complexity: n messages
Time Complexity: O (n(l+d))

Present event-driven pseudo-code that checks whether all nodes at
distance k from a distinct node pr have the same number of neighbors.
Assume that 1 ≤ k ≤ dist, where dist is the longest distance of p r
from any other node in the graph. What is the communication complexity
and the time complexity of your algorithm? Justify your answer. Your
algorithm should not assume knowledge of dist.

Code for process p_i
Initially, 

if (p_i == p_r)
	parent_i = nill
	dist_i = 0 
	replies = 0;
	Vector neighbors[];
	check = false;
else
	dist_i = \inf{}

upon receiving no message:
if (pi == pr) and (parenti == null) then
	send <0> to all neighbors;
	parenti = pi

upon receiving <M> from neighbor pj:
	if (m+1 < dist_i) then
		dist_i = m+1;
		parent_i = pj;
		if (dist_i == k)
			send <NBR, (num_of_neighbors - 1) > to parent_i
		send <dist_i> to all neighbors except pj

upon receiving <NBR, num> from neighbor pj:
	if (parent i != id)
		send <NBR, num> to parent_i
	else
		neighbors[replies] = num_nodes
		replies++;
		if (replies == num_of_neighbors)
			return true if all elements in the neighbors vector are
			the same

Message Complextity: O(m*n)
Time Complextity: O(diam)


Present event-driven pseudo-code that does the following: For all k, 1
≤ k ≤ dist, it counts the number of nodes that are in distance k from
a distinct node p r , where dist is the longest distance of p r from
any other node in the graph. When the algorithm terminates, p r should
know dist and for every k, it should also know how many nodes are in
distance k from it.

Code for process p_i
Initially, 

var count = 0;

if (p_i == p_r)
	parent_i = nill
	replies = 0;
	phase = 0;
else
	dist_i = \inf{}

upon receiving no message:
	if (pi == pr) and (parent_i == null) then
		send <SEARCH> to all neighbors;
		parent_i = pi

upon receiving <SEARCH> from neighbor pj:
	if (parent_i == NULL)
		parent_i = pj;
		send <ACK, 1> to pj
	else if (parent_i == pj)
			send <SEARCH> to all children except pj
	else if 
			send <NACK> to pj

upon receiving <ACK, num> from neighbor pj:
	replies ++
	count += num

	if pj not in the childrens set:
		add pj to childrens

	if (parent_i == pi)
		if (replies == num_of_neighbors)
			replies = 0;
			phase ++
			if (phase < k)
				send <SEARCH> to all children
			else
				terminate
	else
		if (replies == num_of_neighbors - 1) // except parent
			replies = 0;
			send <ACK, count> to pj
			count = 0

upon receiving <NACK> from neighbor pj
	replies ++

Exercise 3:
-----------
Initialy each process has:
v = id
status = active
phase = 0;
received = 0
rcv_val[2] = {0, 0} // rcv_val[1]: Value of the first left node 
					// rcv_val[0]: Value of the second left node
leader = false;

upon receiving no message:
	if (status == active )
		send <M, v, phase, 2> to right

upon receiving <M, value, phaseId, counter> from left
	if (status == active) {
		if (counter > 0) {
			received++
			counter--
			rcv_val[counter] = value
			send <M, value, phaseId, counter> to right
		}

		if (received == 2 && state == active) {
			if (rcv_val[1] == v) {
				leader = true
				terminate
			}

			if (rcv_val[1] > rcv_val[0] && rcv_val[1] > v) {
				v  = rcv_val[1];
				phase++;
				send <M, v, phase, 2> to right
			}
			else {
				state = relay 
			}
		}
	}
	else
		send (M, value, phaseId, counter) to right

Message complexity: O(n^2)
Time complexity: O(n)
